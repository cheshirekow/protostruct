#pragma once
// Generated by protostruct. DO NOT EDIT BY HAND!

#include "tangent/protostruct/cereal_utils.h"
#include "tangent/protostruct/test/test_messages.h"

template <class Archive>
int32_t save_minimal(const Archive& ar, const MyEnumA& value) {
  return static_cast<int32_t>(value);
}

template <class Archive>
void load_minimal(const Archive& ar, MyEnumA& out_value,
                  const int32_t& in_value) {
  switch (in_value) {
    case MyEnumA_VALUE1:
      out_value = MyEnumA_VALUE1;
      return;
    case MyEnumA_VALUE2:
      out_value = MyEnumA_VALUE2;
      return;
    case MyEnumA_VALUE3:
      out_value = MyEnumA_VALUE3;
      return;
  }
}

template <class Archive>
void serialize(Archive& archive, MyMessageA& cobj) {
  archive(cereal::make_nvp("fieldA", cobj.fieldA));
  archive(cereal::make_nvp("fieldB", cobj.fieldB));
  archive(cereal::make_nvp("fieldC", cobj.fieldC));
  archive(cereal::make_nvp("fieldD", cobj.fieldD));
}

template <class Archive>
void serialize(Archive& archive, MyMessageB& cobj) {
  archive(cereal::make_nvp("fieldA", cobj.fieldA));
}

template <class Archive>
void serialize(Archive& archive, MyMessageC& cobj) {
  archive(cereal::make_nvp(
      "fieldA", protostruct::cereal_array(cobj.fieldA, cobj.fieldACount)));

  archive(cereal::make_nvp(
      "fieldB", protostruct::cereal_array(cobj.fieldB, cobj.fieldBCount)));

  archive(cereal::make_nvp(
      "fieldC", protostruct::cereal_array(cobj.fieldC, cobj.fieldCCount)));
}

template <class Archive>
void serialize(Archive& archive, TestFixedArray& cobj) {
  int fixedSizedArrayCount = protostruct::array_size(cobj.fixedSizedArray);

  archive(cereal::make_nvp(
      "fixedSizedArray",
      protostruct::cereal_array(cobj.fixedSizedArray, fixedSizedArrayCount)));
}

template <class Archive>
void serialize(Archive& archive, TestAlignas& cobj) {
  int arrayCount = protostruct::array_size(cobj.array);

  archive(cereal::make_nvp("array",
                           protostruct::cereal_array(cobj.array, arrayCount)));
}

template <class Archive>
void serialize(Archive& archive, TestPrimitives& cobj) {
  archive(cereal::make_nvp("fieldA", cobj.fieldA));
  archive(cereal::make_nvp("fieldB", cobj.fieldB));
  archive(cereal::make_nvp("fieldC", cobj.fieldC));
  archive(cereal::make_nvp("fieldD", cobj.fieldD));
  archive(cereal::make_nvp("fieldE", cobj.fieldE));
  archive(cereal::make_nvp("fieldF", cobj.fieldF));
  archive(cereal::make_nvp("fieldG", cobj.fieldG));
  archive(cereal::make_nvp("fieldH", cobj.fieldH));
  archive(cereal::make_nvp("fieldI", cobj.fieldI));
  archive(cereal::make_nvp("fieldJ", cobj.fieldJ));
  archive(cereal::make_nvp("fieldK", cobj.fieldK));
}
