// Generated by protostruct. DO NOT EDIT BY HAND!

#include <stdint.h>

#include "{{include_base}}.pbwire.h"

#ifdef __cplusplus
extern "C"{
#endif

{% for descr in filedescr.enum_type %}
int pbemit_{{descr.name}}(pbwire_EmitContext* ctx, {{descr.name}} value){
  return pbemit_int32(ctx, (int32_t)value);
}

int pbparse_{{descr.name}}(pbwire_ParseContext* ctx, {{descr.name}}* value){
  int32_t numeric_value;
  int result = pbparse_int32(ctx, &numeric_value);
  if(result < 0){
    return result;
  }
  switch(numeric_value){
    {% for value in descr.value %}
      case {{value.name}}:
        *value = {{value.name}};
        break;
    {% endfor %}
      default:
        // Invalid enum value, possibly retired. For now let's treat this as
        // an error. In the future, let's figure out a better way of making
        // this recoverable.
        return -1;
  }
  return result;
}
{%- endfor %}

{% for descr in filedescr.message_type %}

int _pbemit0_{{descr.name}}(pbwire_EmitContext* ctx, const {{descr.name}}* obj){
  int write_result = 0;

  {% if util.has_packed_field(descr) or util.has_message_field(descr) %}
  uint32_t* delimit_ptr = NULL;
  int delimit_size = 0;
  {% endif %}

      uint32_t encoded_size = 0;
{% for fielddescr in descr.field %}
      /* {{fielddescr.name}} */
  {% if util.is_packed(fielddescr) %}
      write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
      if(write_result < 0){
        return write_result;
      }
      encoded_size += write_result;

      delimit_size = 0;
      delimit_ptr = ctx->length_cache.ptr++;
      {% if util.get_lengthfield(fielddescr) %}
      {% set countvar = "obj->" + util.get_lengthfield(fielddescr) %}
      {% else %}
      {% set countvar = "ARRAY_SIZE(obj->" + fielddescr.name + ")" %}
      {% endif %}
      for(int idx=0; idx < {{countvar}}; idx++){
        write_result = {{ctx.get_emit_fun(fielddescr)}}(
          ctx, obj->{{fielddescr.name}}[idx]);
        if(write_result < 0){
          return write_result;
        }
        delimit_size += write_result;
      }
      *delimit_ptr = delimit_size;
      encoded_size += write_result;

      write_result = pbemit_uint32(ctx, delimit_size);
      if(write_result < 0){
        return write_result;
      }
      encoded_size += write_result;
  {% elif util.is_repeated(fielddescr) %}
    {% if util.get_lengthfield(fielddescr) %}
    {% set countvar = "obj->" + util.get_lengthfield(fielddescr) %}
    {% else %}
    {% set countvar = "ARRAY_SIZE(obj->" + fielddescr.name + ")" %}
    {% endif %}
    {% if util.is_primitive(fielddescr) %}
    for(int idx=0; idx < {{countvar}}; idx++){
      write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
      if(write_result < 0){
        return write_result;
      }
      encoded_size += write_result;

      write_result = {{ctx.get_emit_fun(fielddescr)}}(ctx, obj->{{fielddescr.name}}[idx]);
      if(write_result < 0){
        return write_result;
      }
      encoded_size += write_result;
    }
    {% else %}
    for(int idx=0; idx < {{countvar}}; idx++){
      write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
      if(write_result < 0){
        return write_result;
      }
      encoded_size += write_result;

      delimit_ptr = ctx->length_cache.ptr++;
      write_result = {{ctx.get_emit_fun(fielddescr, 0)}}(ctx, &obj->{{fielddescr.name}}[idx]);
      if(write_result < 0){
        return write_result;
      }
      delimit_size = write_result;
      encoded_size += delimit_size;

      *delimit_ptr = delimit_size;
      write_result = pbemit_uint32(ctx, delimit_size);
      if(write_result < 0){
        return write_result;
      }
      encoded_size += write_result;
    }
    {% endif %}
  {% else %}
    {% if util.is_primitive(fielddescr) %}
    write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
    if(write_result < 0){
      return write_result;
    }
    encoded_size += write_result;

    write_result = {{ctx.get_emit_fun(fielddescr)}}(ctx, obj->{{fielddescr.name}});
    if(write_result < 0){
      return write_result;
    }
    encoded_size += write_result;
    {% else %}
    write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
    if(write_result < 0){
      return write_result;
    }
    encoded_size += write_result;

    delimit_ptr = ctx->length_cache.ptr++;
    write_result = {{ctx.get_emit_fun(fielddescr, 0)}}(ctx, &obj->{{fielddescr.name}});
    if(write_result < 0){
      return write_result;
    }
    delimit_size = write_result;
    encoded_size += delimit_size;

    *delimit_ptr = delimit_size;
    write_result = pbemit_uint32(ctx, delimit_size);
    if(write_result < 0){
      return write_result;
    }
    encoded_size += write_result;
    {% endif %}
  {% endif %}
{% endfor %}
      return encoded_size;
}

int _pbemit1_{{descr.name}}(pbwire_EmitContext* ctx, const {{descr.name}}* obj){
  int write_result = 0;

  {% if util.has_packed_field(descr) or util.has_message_field(descr) %}
  uint32_t* delimit_ptr = NULL;
  int delimit_size = 0;
  {% endif %}

      char* buffer_begin = ctx->buffer.ptr;
{% for fielddescr in descr.field %}
      /* {{fielddescr.name}} */
  {% if util.is_packed(fielddescr) %}
      write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;

      delimit_ptr = ctx->length_cache.ptr++;
      delimit_size = *delimit_ptr;
      write_result = pbemit_uint32(ctx, delimit_size);
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;

      {% if util.get_lengthfield(fielddescr) %}
      {% set countvar = "obj->" + util.get_lengthfield(fielddescr) %}
      {% else %}
      {% set countvar = "ARRAY_SIZE(obj->" + fielddescr.name + ")" %}
      {% endif %}
      for(int idx=0; idx < {{countvar}}; idx++){
        write_result = {{ctx.get_emit_fun(fielddescr)}}(ctx, obj->{{fielddescr.name}}[idx]);
        if(write_result < 0){
          return write_result;
        }
        ctx->buffer.ptr += write_result;
      }
  {% elif util.is_repeated(fielddescr) %}
    {% if util.get_lengthfield(fielddescr) %}
    {% set countvar = "obj->" + util.get_lengthfield(fielddescr) %}
    {% else %}
    {% set countvar = "ARRAY_SIZE(obj->" + fielddescr.name + ")" %}
    {% endif %}

    {% if util.is_primitive(fielddescr) %}
    for(int idx=0; idx < {{countvar}}; idx++){
      write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;

      write_result = {{ctx.get_emit_fun(fielddescr)}}(ctx, obj->{{fielddescr.name}}[idx]);
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;
    }
    {% else %}
    for(int idx=0; idx < {{countvar}}; idx++){
      write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;

      delimit_ptr = ctx->length_cache.ptr++;
      delimit_size = *delimit_ptr;
      write_result = pbemit_uint32(ctx, delimit_size);
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;

      write_result = {{ctx.get_emit_fun(fielddescr, 1)}}(ctx, &obj->{{fielddescr.name}}[idx]);
      if(write_result < 0){
        return write_result;
      }
      ctx->buffer.ptr += write_result;
    }
    {% endif %}
  {% else %}
    {% if util.is_primitive(fielddescr) %}
    write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
    if(write_result < 0){
      return write_result;
    }
    ctx->buffer.ptr += write_result;

    write_result = {{ctx.get_emit_fun(fielddescr)}}(ctx, obj->{{fielddescr.name}});
    if(write_result < 0){
      return write_result;
    }
    ctx->buffer.ptr += write_result;
    {% else %}
    write_result = pbwire_write_tag(ctx, {{util.get_tag(fielddescr)}});
    if(write_result < 0){
      return write_result;
    }
    ctx->buffer.ptr += write_result;

    delimit_ptr = ctx->length_cache.ptr++;
    delimit_size = *delimit_ptr;
    write_result = pbemit_uint32(ctx, delimit_size);
    if(write_result < 0){
      return write_result;
    }
    ctx->buffer.ptr += write_result;

    write_result = {{ctx.get_emit_fun(fielddescr, 1)}}(ctx, &obj->{{fielddescr.name}});
    if(write_result < 0){
      return write_result;
    }
    ctx->buffer.ptr += write_result;
    {% endif %}
  {% endif %}
{% endfor %}

      return (ctx->buffer.ptr - buffer_begin);
}

int pbemit_{{descr.name}}(pbwire_EmitContext* ctx, const {{descr.name}}* obj){
  int retcode = 0;

  retcode = _pbemit0_{{descr.name}}(ctx, obj);
  if(retcode < 0){
    return retcode;
  }
  retcode = _pbemit1_{{descr.name}}(ctx, obj);
  return retcode;
}

static int _parse_fielditem_{{descr.name}}(
    pbwire_ParseContext* ctx, {{descr.name}}* obj, uint32_t tag){
{% for fielddescr in descr.field %}
{% if util.is_repeated(fielddescr) and not util.get_lengthfield(fielddescr) %}
  uint32_t {{fielddescr.name}}Count = 0;
{% endif %}
{% endfor %}
  switch(tag){
{% for fielddescr in descr.field %}
    /* {{fielddescr.name}} */
    case {{util.get_tag(fielddescr)}}: {
{% if util.is_repeated(fielddescr) %}
  {% if util.get_lengthfield(fielddescr) %}
  {% set countvar = "obj->" + util.get_lengthfield(fielddescr) %}
  {% else %}
  {% set countvar = fielddescr.name + "Count" %}
  {% endif %}
  {% if util.is_packed(fielddescr) %}
      if({{countvar}} < ARRAY_SIZE(obj->{{fielddescr.name}})){
        return {{ctx.get_pbparse(fielddescr)}}(
          ctx, &obj->{{fielddescr.name}}[{{countvar}}++]);
      } else {
        return {{ctx.get_pbparse(fielddescr)}}(ctx, NULL);
      }
    }

    /* {{fielddescr.name}} (packed) */
    case {{util.get_packed_tag(fielddescr)}}: {
      size_t write_idx = {{countvar}};
      int retcode = pbwire_parse_packed_repeated(
        ctx, (pbwire_RepeatedItemCallback)&{{ctx.get_pbparse(fielddescr)}},
        obj->{{fielddescr.name}}, sizeof(obj->{{fielddescr.name}}[0]),
        ARRAY_SIZE(obj->{{fielddescr.name}}), &write_idx);
      {{countvar}} = write_idx;
      return retcode;
  {% else %}
      return {{ctx.get_pbparse(fielddescr)}}(
        ctx, &obj->{{fielddescr.name}}[{{countvar}}++]);
  {% endif %}
{% else %}
      return {{ctx.get_pbparse(fielddescr)}}(ctx, &obj->{{fielddescr.name}});
{% endif %}
    }
{% endfor %}
    default:
      /* Unknown field */
      return pbparse_sink_unknown(tag, ctx);
  };


}

int pbparse_{{descr.name}}(pbwire_ParseContext* ctx, {{descr.name}}* obj){
  return pbwire_parse_message(
    ctx, (pbwire_FieldItemCallback)_parse_fielditem_{{descr.name}}, obj);
}

{% endfor %}

#ifdef __cplusplus
} // extern "C"
#endif
