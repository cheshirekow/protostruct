#pragma once
// Generated by protostruct. DO NOT EDIT BY HAND!
#include <stdalign.h>
#include <stdbool.h>
#include <stdint.h>

{% for depend in filedescr.dependency %}
include "{{depend.replace(".", "/")}}.h";
{% endfor %}

{% set opts = util.get_protostruct_options(filedescr) %}
{% if opts and opts.capacity_macros %}
{% for macrodef in opts.capacity_macros %}
#define {{macrodef}}
{% endfor %}
{% endif %}

{% for enumidx, enumdescr in enumerate(filedescr.enum_type) %}
{{ctx.get_leading_comment([5, enumidx], "cpp")}}
typedef enum {{enumdescr.name}} {
  {% set columnfmt = util.get_enum_columns(enumdescr.value, style="cpp") %}
  {% for vidx, valuedescr in enumerate(enumdescr.value) %}
  {% set comment = ctx.get_leading_comment([5, enumidx, 2, vidx], "cpp") %}
  {% if comment %}
  {{comment}}
  {% endif %}
  {% set comment = ctx.get_trailing_comment([5, enumidx, 2, vidx], "cpp") %}
  {{columnfmt.format(valuedescr.name, valuedescr.number)}},  {{comment}}
  {% endfor %}
} {{enumdescr.name}};

{% endfor %}
{% for msgidx, msgdescr in enumerate(filedescr.message_type) %}
{{ctx.get_leading_comment([4, msgidx], "cpp")}}
typedef struct {{msgdescr.name}} {
  {% for fidx, fielddescr in enumerate(msgdescr.field) %}
  {% set path=[4, msgidx, 2, fidx] %}
  {% set comment = ctx.get_leading_comment(path, "cpp") %}
  {% if comment %}
  {{comment}}
  {% endif %}
  {% set comment = ctx.get_trailing_comment(path, "cpp") %}
  {% if util.is_repeated(fielddescr) %}
    {{ctx.get_typename(fielddescr, "cpp")}} {{fielddescr.name}}[{{util.get_arraysize(fielddescr)}}]; {{comment}}
  {% else %}
    {{ctx.get_typename(fielddescr, "cpp")}} {{fielddescr.name}}; {{comment}}
  {% endif %}
  {% endfor %}
} {{msgdescr.name}};

{% endfor %}

