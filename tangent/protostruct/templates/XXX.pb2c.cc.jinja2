// Generated by protostruct. DO NOT EDIT BY HAND!

#include <stdint.h>

#include "{{include_base}}.pbwire.h"
#include "{{include_base}}.pb.h"

{% for descr in filedescr.enum_type %}
{{descr.name}} pb2c(const {{ctx.fqn_typename_cpp(descr)}}& proto){
  switch(proto){
    {% for value in descr.value %}
      case {{ctx.fqn_typename_cpp(value)}}:
        return {{value.name}};
    {% endfor %}
      default:
        break;
  }
  return {{descr.value[0].name}};
}

{{ctx.fqn_typename_cpp(descr)}} c2pb({{descr.name}} value){
  switch(value){
    {% for value in descr.value %}
      case {{value.name}}:
        return {{ctx.fqn_typename_cpp(value)}};
    {% endfor %}
  }

  return {{ctx.fqn_typename_cpp(descr.value[0])}};
}
{%- endfor %}

{% for descr in filedescr.message_type %}
void pb2c(const {{ctx.fqn_typename_cpp(descr)}}& proto, {{descr.name}}* cobj){
{% for fielddescr in descr.field %}
  {% set cfield = fielddescr.name %}
  {% set protofield = fielddescr.name.lower() %}
  {% if util.is_repeated(fielddescr) %}
    {% if util.get_lengthfield(fielddescr) %}
    {% set countvar = "cobj->" + util.get_lengthfield(fielddescr) %}
    {% else %}
    int {{fielddescr.name}}Count;
    {% set countvar = fielddescr.name + "Count" %}
    {% endif %}

    {{countvar}} = std::min<int>(proto.{{protofield}}_size(), {{util.get_arraysize(fielddescr)}});
    for(int idx=0; idx < static_cast<int>({{countvar}}); idx++){
      {% if util.is_primitive(fielddescr) %}
        cobj->{{cfield}}[idx] = proto.{{protofield}}(idx);
      {% else %}
        pb2c(proto.{{protofield}}(idx), &cobj->{{cfield}}[idx]);
      {% endif %}
    }
  {% else %}
    {% if util.is_message(fielddescr)%}
      pb2c(proto.{{protofield}}(), &cobj->{{cfield}});
    {% elif util.is_enum(fielddescr) %}
      cobj->{{cfield}} = pb2c(proto.{{protofield}}());
    {% else %}
      cobj->{{cfield}} = proto.{{protofield}}();
    {% endif %}
  {% endif %}
{% endfor %}
}

void c2pb(const {{descr.name}}& cobj, {{ctx.fqn_typename_cpp(descr)}}* proto){
{% for fielddescr in descr.field %}
  {% set cfield = fielddescr.name %}
  {% set protofield = fielddescr.name.lower() %}
  {% if util.is_repeated(fielddescr) %}
    {% if util.get_lengthfield(fielddescr) %}
    {% set countvar = "cobj." + util.get_lengthfield(fielddescr) %}
    {% else %}
    {% set countvar = "ARRAY_SIZE(cobj." + fielddescr.name + ")" %}
    {% endif %}

    proto->mutable_{{protofield}}()->Clear();
    proto->mutable_{{protofield}}()->Reserve({{countvar}});
    for(int idx=0; idx < static_cast<int>({{countvar}}); idx++){
      {% if util.is_primitive(fielddescr) %}
        proto->add_{{protofield}}(cobj.{{cfield}}[idx]);
      {% else %}
        c2pb(cobj.{{cfield}}[idx], proto->add_{{protofield}}());
      {% endif %}
    }
  {% else %}
    {% if util.is_message(fielddescr) %}
      c2pb(cobj.{{cfield}}, proto->mutable_{{protofield}}());
    {% elif util.is_enum(fielddescr) %}
      proto->set_{{protofield}}(c2pb(cobj.{{cfield}}));
    {% else %}
      proto->set_{{protofield}}(cobj.{{cfield}});
    {% endif %}
  {% endif %}
{% endfor %}
}

{% endfor %}


