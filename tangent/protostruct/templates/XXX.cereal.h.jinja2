#pragma once
// Generated by protostruct. DO NOT EDIT BY HAND!

#include "tangent/protostruct/cereal_utils.h"
#include "{{get_header_filepath(filedescr)}}"

{% for descr in filedescr.enum_type %}
template <class Archive>
int32_t save_minimal(const Archive& ar, const {{descr.name}}& value){
  return static_cast<int32_t>(value);
}

template <class Archive>
void load_minimal(const Archive& ar, {{descr.name}}& out_value, const int32_t& in_value){
  switch(in_value){
    {% for value in descr.value %}
      case {{value.name}}:
        out_value = {{value.name}};
        return;
    {% endfor %}
  }
}
{% endfor %}

{% for descr in filedescr.message_type %}
template <class Archive>
void serialize(Archive& archive, {{descr.name}}& cobj){
{% for fielddescr in descr.field %}
  {% if is_repeated(fielddescr) %}
    {% if get_lengthfield(fielddescr) %}
    {% set countvar = "cobj." + get_lengthfield(fielddescr) %}
    {% else %}
    int {{fielddescr.name}}Count = protostruct::array_size(cobj.{{fielddescr.name}});
    {% set countvar = fielddescr.name + "Count" %}
    {% endif %}

    archive(cereal::make_nvp(
      "{{fielddescr.name}}",
      protostruct::cereal_array(
        cobj.{{fielddescr.name}},
        {{countvar}})));
  {% else %}
    archive(cereal::make_nvp("{{fielddescr.name}}", cobj.{{fielddescr.name}}));
  {% endif %}
{% endfor %}
}

{% endfor %}



