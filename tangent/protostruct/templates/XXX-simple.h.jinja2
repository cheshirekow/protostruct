#pragma once
// Generated by protostruct. DO NOT EDIT BY HAND!

#include <cstdint>
#include <string>
#include <vector>

#include "tangent/tjson/ostream.h"
#include "tangent/tjson/parse.h"

{% for depend in filedescr.dependency %}
include "{{depend.replace(".", "/")}}.h";
{% endfor %}

{% if filedescr.package %}
{% for ns in filedescr.package.split(".") %}
namespace {{ns}} {
{% endfor %}
{% endif %}

{% for enumidx, enumdescr in enumerate(filedescr.enum_type) %}
{{ctx.get_leading_comment([5, enumidx], "cpp")}}
enum {{enumdescr.name}} {
  {% set columnfmt = get_enum_columns(enumdescr.value, style="cpp") %}
  {% for vidx, valuedescr in enumerate(enumdescr.value) %}
  {% set comment = ctx.get_leading_comment([5, enumidx, 2, vidx], "cpp") %}
  {% if comment %}
  {{comment}}
  {% endif %}
  {% set comment = ctx.get_trailing_comment([5, enumidx, 2, vidx], "cpp") %}
  {{columnfmt.format(valuedescr.name, valuedescr.number)}},  {{comment}}
  {% endfor %}
};

int parse_json(const std::string& json_str, {{enumdescr.name}}* value);
tjson::OStream& operator<<(tjson::OStream& out, const {{enumdescr.name}}& value);

{% endfor %}
{% for msgidx, msgdescr in enumerate(filedescr.message_type) %}
{{ctx.get_leading_comment([4, msgidx], "cpp")}}
struct {{msgdescr.name}} {
  {% for fidx, fielddescr in enumerate(msgdescr.field) %}
  {% set path=[4, msgidx, 2, fidx] %}
  {% set comment = ctx.get_leading_comment(path, "cpp") %}
  {% if comment %}
  {{comment}}
  {% endif %}
  {% set comment = ctx.get_trailing_comment(path, "cpp") %}
  {% if is_repeated(fielddescr) %}
    std::vector<{{ctx.get_typename(fielddescr, "cpp")}}> {{fielddescr.name}}; {{comment}}
  {% else %}
    {{ctx.get_typename(fielddescr, "cpp")}} {{fielddescr.name}}; {{comment}}
  {% endif %}
  {% endfor %}

  void parse_json(const std::string& json_str);
  std::string to_json();
};

tjson::OStream& operator<<(tjson::OStream& out, const {{msgdescr.name}}& value);

{% endfor %}

{% if filedescr.package %}
{% for ns in filedescr.package.split(".") %}
}  // namespace {{ns}}
{% endfor %}
{% endif %}

namespace tjson {

{% for enumdescr in filedescr.enum_type %}
int parse(tjson_ParseContext ctx, {{fqn_typename_cpp(enumdescr)}}* value);
{% endfor %}

{% for descr in filedescr.message_type %}
int parse(tjson_ParseContext ctx, {{fqn_typename_cpp(descr)}}* value);
{% endfor %}


} // namespace tjson
